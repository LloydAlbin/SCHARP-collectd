LoadPlugin postgresql
<Plugin postgresql>


  <Query connections>
    Statement "SELECT count(*) AS connections FROM pg_stat_activity;"
    <Result>
      Type pg_conns
      ValuesFrom connections
    </Result>
  </Query>


  <Query connection_states>
    Statement "SELECT a.state, TRUE AS waiting, COALESCE(b.connections,0) AS connections FROM 
	(SELECT 'active' AS state 
    UNION ALL SELECT 'idle' 
    UNION ALL SELECT 'idle in transaction' 
    UNION ALL SELECT 'idle in transaction (aborted)' 
    UNION ALL SELECT 'fastpath function call' 
    UNION ALL SELECT 'disabled') a 
LEFT JOIN (SELECT state, waiting, count(*) as connections FROM pg_stat_activity GROUP BY pg_stat_activity.state, pg_stat_activity.waiting) b
	ON a.state = b.state AND b.waiting = TRUE
UNION ALL
SELECT a.state, FALSE AS waiting, COALESCE(b.connections,0) FROM 
	(SELECT 'active' AS state 
    UNION ALL SELECT 'idle' 
    UNION ALL SELECT 'idle in transaction' 
    UNION ALL SELECT 'idle in transaction (aborted)' 
    UNION ALL SELECT 'fastpath function call' 
    UNION ALL SELECT 'disabled') a 
LEFT JOIN (SELECT state, waiting, count(*) as connections FROM pg_stat_activity GROUP BY pg_stat_activity.state, pg_stat_activity.waiting) b
	ON a.state = b.state AND b.waiting = FALSE;"
    <Result>
      Type pg_connection_state
      InstancesFrom "state" "waiting"
      ValuesFrom connections
    </Result>
  </Query>


  <Query connection_states_96>
    Statement "SELECT a.state, TRUE AS waiting, COALESCE(b.connections,0) AS connections FROM
(SELECT 'active' AS state
    UNION ALL SELECT 'idle'
    UNION ALL SELECT 'idle in transaction'
    UNION ALL SELECT 'idle in transaction (aborted)'
    UNION ALL SELECT 'fastpath function call'
    UNION ALL SELECT 'disabled') a
LEFT JOIN (    
SELECT state, TRUE AS waiting, count(*) as connections FROM pg_stat_activity WHERE wait_event_type IN ('Lock') GROUP BY pg_stat_activity.state
) b ON a.state = b.state
UNION ALL
SELECT a.state, FALSE AS waiting, COALESCE(b.connections,0) FROM
        (SELECT 'active' AS state
    UNION ALL SELECT 'idle'
    UNION ALL SELECT 'idle in transaction'
    UNION ALL SELECT 'idle in transaction (aborted)'
    UNION ALL SELECT 'fastpath function call'
    UNION ALL SELECT 'disabled') a
LEFT JOIN (SELECT state, FALSE AS waiting, count(*) as connections FROM pg_stat_activity WHERE wait_event_type NOT IN ('Lock') OR wait_event_type IS NULL GROUP BY pg_stat_activity.state) b
        ON a.state = b.state;"
    <Result>
      Type pg_connection_state
      InstancesFrom "state" "waiting"
      ValuesFrom connections
    </Result>
  </Query>



  <Query concurrent_txns>
    Statement "SELECT a.datname, FALSE AS waiting, COALESCE(b.txns,0) AS txns
FROM pg_database a
LEFT JOIN (
	SELECT datname, waiting, count(*) AS txns 
    FROM pg_stat_activity 
    WHERE state != 'idle' 
    GROUP BY datname, waiting
) b ON a.datname = b.datname AND b.waiting = FALSE
WHERE a.datname NOT LIKE 'tmp_%'
UNION ALL
SELECT a.datname, TRUE AS waiting, COALESCE(b.txns,0)
FROM pg_database a
LEFT JOIN (
	SELECT datname, waiting, count(*) AS txns 
    FROM pg_stat_activity 
    WHERE state != 'idle' 
    GROUP BY datname, waiting
) b ON a.datname = b.datname AND b.waiting = TRUE
WHERE a.datname NOT LIKE 'tmp_%';"
    <Result>
      Type pg_concurrent_txns
      InstancesFrom "datname" "waiting"
      ValuesFrom txns
    </Result>
  </Query>

  <Query concurrent_txns_96>
    Statement "SELECT a.datname, FALSE AS waiting, COALESCE(b.txns,0) AS txns
FROM pg_database a
LEFT JOIN (
        SELECT datname, FALSE AS waiting, count(*) AS txns
    FROM pg_stat_activity
    WHERE state != 'idle' AND (wait_event_type NOT IN ('Lock') OR wait_event_type IS NULL)
    GROUP BY datname
) b ON a.datname = b.datname
WHERE a.datname NOT LIKE 'tmp_%'
UNION ALL
SELECT a.datname, TRUE AS waiting, COALESCE(b.txns,0)
FROM pg_database a
LEFT JOIN (
        SELECT datname, TRUE AS waiting, count(*) AS txns
    FROM pg_stat_activity
    WHERE state != 'idle' AND wait_event_type IN ('Lock')
    GROUP BY datname, waiting
) b ON a.datname = b.datname
WHERE a.datname NOT LIKE 'tmp_%';"
    <Result>
      Type pg_concurrent_txns
      InstancesFrom "datname" "waiting"
      ValuesFrom txns
    </Result>
  </Query>


  <Query connection_state>
    Statement "SELECT a.count as locked, b.count as active, c.count as idle, d.count as idle_transaction, e.count AS idle_trans_abort, f.count AS fastpath, g.count AS disabled 
FROM (SELECT count(*) FROM pg_stat_activity WHERE waiting) AS a,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'active' AND NOT waiting) AS b,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'idle' AND NOT waiting) AS c,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'idle in transaction' AND NOT waiting) AS d,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'idle in transaction (aborted)' AND NOT waiting) AS e,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'fastpath' AND NOT waiting) AS f,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'disabled' AND NOT waiting) AS g;"
    <Result>
      Type pg_connections
      ValuesFrom locked active idle idle_transaction idle_trans_abort fastpath disabled
    </Result>
  </Query>

  <Query connection_state_96>
    Statement "SELECT a.count as locked, b.count as active, c.count as idle, d.count as idle_transaction, e.count AS idle_trans_abort, f.count AS fastpath, g.count AS disabled
FROM (SELECT count(*) FROM pg_stat_activity WHERE wait_event_type IN ('Lock')) AS a,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'active' AND (wait_event_type NOT IN ('Lock') OR wait_event_type IS NULL)) AS b,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'idle' AND (wait_event_type NOT IN ('Lock') OR wait_event_type IS NULL)) AS c,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'idle in transaction' AND (wait_event_type NOT IN ('Lock') OR wait_event_type IS NULL)) AS d,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'idle in transaction (aborted)' AND (wait_event_type NOT IN ('Lock') OR wait_event_type IS NULL)) AS e,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'fastpath function call' AND (wait_event_type NOT IN ('Lock') OR wait_event_type IS NULL)) AS f,
(SELECT count(*) FROM pg_stat_activity WHERE state = 'disabled' AND (wait_event_type NOT IN ('Lock') OR wait_event_type IS NULL)) AS g;"
    <Result>
      Type pg_connections
      ValuesFrom locked active idle idle_transaction idle_trans_abort fastpath disabled
    </Result>
  </Query>

  <Query stat_tables>
    Statement "SELECT 
	b.schemaname || '_' || b.relname AS table, 
    b.seq_scan,
    b.seq_tup_read,
    b.idx_scan,
    b.idx_tup_fetch,
    b.n_tup_ins,
    b.n_tup_upd,
    b.n_tup_del,
    b.n_tup_hot_upd,
    b.n_live_tup,
    b.n_dead_tup,
    b.n_mod_since_analyze,
    b.vacuum_count,
    b.autovacuum_count,
    b.analyze_count,
    b.autoanalyze_count
FROM pg_stat_all_tables b
WHERE relname IN ('table_name')
UNION ALL
SELECT 
	b.schemaname || '_pg_toast_' || a.relname AS table, 
    b.seq_scan,
    b.seq_tup_read,
    b.idx_scan,
    b.idx_tup_fetch,
    b.n_tup_ins,
    b.n_tup_upd,
    b.n_tup_del,
    b.n_tup_hot_upd,
    b.n_live_tup,
    b.n_dead_tup,
    b.n_mod_since_analyze,
    b.vacuum_count,
    b.autovacuum_count,
    b.analyze_count,
    b.autoanalyze_count
FROM pg_class a 
LEFT JOIN pg_stat_all_tables b ON b.relname = 'pg_toast_' || a.oid
WHERE a.relname IN ('table_name');"
    <Result>
      Type pg_stat_tables
      InstancesFrom "table"
      ValuesFrom seq_scan,seq_tup_read,idx_scan,idx_tup_fetch,n_tup_ins,n_tup_upd,n_tup_del,n_tup_hot_upd,n_live_tup,n_dead_tup,n_mod_since_analyze,vacuum_count,autovacuum_count,analyze_count, autoanalyze_count
    </Result>
  </Query>

  <Query planning_time>
    Statement "SELECT * FROM ds.planning_time(ARRAY[ARRAY['query_name', E'sql_query'],
ARRAY['query_name', E'sql_query']]);;"
    <Result>
      Type pg_planning_time
      InstancesFrom "query"
      ValuesFrom planning_time
    </Result>
  </Query>

  <Query connection_state_by_database>
    Statement "SELECT f.datname, COALESCE(a.count,0) as locked, COALESCE(b.count,0) as active, COALESCE(c.count,0) as idle, COALESCE(d.count,0) as idle_transaction, COALESCE(e.count,0) AS idle_trans_abort, COALESCE(g.count,0) AS fastpath, COALESCE(h.count,0) AS disabled FROM
        (SELECT datname FROM pg_stat_activity WHERE datname NOT LIKE 'tmp_%' GROUP BY datname) AS f
    LEFT JOIN
        (SELECT datname, count(*) FROM pg_stat_activity WHERE waiting AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS a
    ON f.datname = a.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'active' AND NOT waiting AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS b
    ON f.datname = b.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'idle' AND NOT waiting AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS c
    ON f.datname = c.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'idle in transaction' AND NOT waiting AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS d
    ON f.datname = d.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'idle in transaction (aborted)' AND NOT waiting AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS e
    ON f.datname = e.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'fastpath' AND NOT waiting AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS g
    ON f.datname = g.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'disabled' AND NOT waiting AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS h
    ON f.datname = h.datname;"
    <Result>
      Type pg_connections
      InstancesFrom "datname"
      ValuesFrom locked active idle idle_transaction idle_trans_abort fastpath disabled
    </Result>
  </Query>

  <Query connection_state_by_database_96>
    Statement "SELECT f.datname, COALESCE(a.count,0) as locked, COALESCE(b.count,0) as active, COALESCE(c.count,0) as idle, COALESCE(d.count,0) as idle_transaction, COALESCE(e.count,0) AS idle_trans_abort, COALESCE(g.count,0) AS fastpath, COALESCE(h.count,0) AS disabled FROM
        (SELECT datname FROM pg_stat_activity WHERE datname NOT LIKE 'tmp_%' GROUP BY datname) AS f
    LEFT JOIN
        (SELECT datname, count(*) FROM pg_stat_activity WHERE wait_event_type IN ('Lock') AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS a
    ON f.datname = a.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'active' AND wait_event_type NOT IN ('Lock') AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS b
    ON f.datname = b.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'idle' AND wait_event_type NOT IN ('Lock') AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS c
    ON f.datname = c.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'idle in transaction' AND wait_event_type NOT IN ('Lock') AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS d
    ON f.datname = d.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'idle in transaction (aborted)' AND wait_event_type NOT IN ('Lock') AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS e
    ON f.datname = e.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'fastpath' AND wait_event_type NOT IN ('Lock') AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS g
    ON f.datname = g.datname
    LEFT JOIN
    (SELECT datname, count(*) FROM pg_stat_activity WHERE state = 'disabled' AND wait_event_type NOT IN ('Lock') AND datname NOT LIKE 'tmp_%' GROUP BY datname) AS h
    ON f.datname = h.datname;"
    <Result>
      Type pg_connections
      InstancesFrom "datname"
      ValuesFrom locked active idle idle_transaction idle_trans_abort fastpath disabled
    </Result>
  </Query>



  <Query database_size>
    Statement "SELECT pg_database.datname AS database, pg_database_size(pg_database.oid) AS size FROM pg_database WHERE datname NOT LIKE 'tmp_%' ORDER BY pg_database.datname;"
    <Result>
      Type pg_databases
      InstancesFrom "database"
      ValuesFrom size
    </Result>
  </Query>


  <Query database_transactions>
    Statement "SELECT datname AS database, txns FROM (SELECT foo.freez::int, age(datfrozenxid) AS txns, datname FROM pg_database d JOIN (SELECT setting AS freez FROM pg_settings WHERE name = 'autovacuum_freeze_max_age') AS foo ON (true) WHERE d.datallowconn AND d.datname NOT LIKE 'tmp_%') AS foo2;"
    <Result>
      Type pg_txns
      InstancesFrom "database"
      ValuesFrom txns
    </Result>
  </Query>


  <Query transactions>
    Statement "select sum(xact_commit + xact_rollback) from pg_stat_database;"
    <Result>
      Type pg_db_txns
      ValuesFrom sum
    </Result>
  </Query>


  <Query buffercache>
    Statement "SELECT CASE pg_buffercache.usagecount WHEN 0 THEN 'Just Read - Least Used' WHEN 1 THEN 'Low Usage' WHEN 2 THEN 'Medium Low Usage' WHEN 3 THEN 'Medium High Usage' WHEN 4 THEN 'High Usage' WHEN 5 THEN 'Heavily Used' ELSE 'Unused' END AS usage,
         CASE pg_buffercache.isdirty WHEN TRUE THEN 'WAL Only' ELSE 'Normal' END AS written,
         count(*) *((
                                     SELECT pg_settings.setting::bigint AS
                                       setting
                                     FROM pg_settings
                                     WHERE pg_settings.name = 'block_size'::text
         )) AS size
  FROM pg_buffercache
  GROUP BY pg_buffercache.usagecount,
           pg_buffercache.isdirty
  ORDER BY pg_buffercache.isdirty,
           pg_buffercache.usagecount;"
    <Result>
      Type pg_buffercache
      InstancesFrom "usage", "written"
      ValuesFrom size
    </Result>
  </Query>


  <Query buffercache_databases>
     Statement "SELECT datname, COALESCE(shared_buffers,0) AS shared_buffers 
FROM pg_database a
LEFT JOIN public.pg_buffercache_databases USING (datname)
WHERE datname NOT LIKE 'tmp_%';"
    <Result>
      Type pg_buffercache_databases
      InstancesFrom "datname"
      ValuesFrom shared_buffers
    </Result>
  </Query>


  <Query database_commit_ratio_by_database>
    Statement "SELECT round(100.*sd.xact_commit/(sd.xact_commit+sd.xact_rollback), 2) AS dcommitratio, d.datname, u.usename FROM pg_stat_database sd JOIN pg_database d ON (d.oid=sd.datid) JOIN pg_user u ON (u.usesysid=d.datdba) WHERE sd.xact_commit+sd.xact_rollback<>0 AND d.datname NOT LIKE 'tmp_%';"
    <Result>
      Type pg_commit_ratio
      InstancesFrom "datname"
      ValuesFrom dcommitratio
    </Result>
  </Query>


  <Query database_commit_ratio>
    Statement "SELECT round(100.*sd.xact_commit/(sd.xact_commit+sd.xact_rollback), 2) AS dcommitratio, d.datname, u.usename FROM pg_stat_database sd JOIN pg_database d ON (d.oid=sd.datid) JOIN pg_user u ON (u.usesysid=d.datdba) WHERE sd.xact_commit+sd.xact_rollback<>0 AND d.datname = $1;"
    Param database
    <Result>
      Type pg_commit_ratio
      InstancesFrom "datname"
      ValuesFrom dcommitratio
    </Result>
  </Query>


  <Query database_stats>
    Statement "SELECT datname,
  numbackends AS backends,xact_commit AS commits,xact_rollback AS rollbacks,
  blks_read  *((
                SELECT pg_settings.setting::bigint AS setting
                FROM pg_settings
                WHERE pg_settings.name = 'block_size'::text
                )) AS read, blks_hit *((
                SELECT pg_settings.setting::bigint AS setting
                FROM pg_settings
                WHERE pg_settings.name = 'block_size'::text
                ))  AS hit
 ,(SELECT SUM(idx_scan) FROM pg_stat_user_indexes) AS idxscan
 ,COALESCE((SELECT SUM(idx_tup_read) FROM pg_stat_user_indexes),0) AS idxtupread
 ,COALESCE((SELECT SUM(idx_tup_fetch) FROM pg_stat_user_indexes),0) AS idxtupfetch
 ,COALESCE((SELECT SUM(idx_blks_read) *((
                SELECT pg_settings.setting::bigint AS setting
                FROM pg_settings
                WHERE pg_settings.name = 'block_size'::text
                ))  FROM pg_statio_user_indexes),0) AS idxblksread
 ,COALESCE((SELECT SUM(idx_blks_hit) *((
                SELECT pg_settings.setting::bigint AS setting
                FROM pg_settings
                WHERE pg_settings.name = 'block_size'::text
                ))  FROM pg_statio_user_indexes),0) AS idxblkshit
 ,COALESCE((SELECT SUM(seq_scan) FROM pg_stat_user_tables),0) AS seqscan
 ,COALESCE((SELECT SUM(seq_tup_read) FROM pg_stat_user_tables),0) AS seqtupread
 ,tup_returned AS ret, tup_fetched AS fetch, tup_inserted AS ins
 ,tup_updated AS upd, tup_deleted AS del, deadlocks, blk_read_time, blk_write_time
 FROM pg_stat_database WHERE datname = $1;"
    Param database
    <Result>
      Type pg_bkends
      InstancesFrom "datname"
      ValuesFrom backends
    </Result>
    <Result>
      Type pg_xact_commit
      InstancesFrom "datname"
      ValuesFrom commits
    </Result>
    <Result>
      Type pg_xact_rollback
      InstancesFrom "datname"
      ValuesFrom rollbacks
    </Result>
    <Result>
      Type pg_blks_read
      InstancesFrom "datname"
      ValuesFrom read
    </Result>
    <Result>
      Type pg_blks_hit
      InstancesFrom "datname"
      ValuesFrom hit
    </Result>
    <Result>
      Type pg_idx_scan
      InstancesFrom "datname"
      ValuesFrom idxscan
    </Result>
    <Result>
      Type pg_idx_tup_read
      InstancesFrom "datname"
      ValuesFrom idxtupread
    </Result>
    <Result>
      Type pg_idx_tup_fetch
      InstancesFrom "datname"
      ValuesFrom idxtupfetch
    </Result>
    <Result>
      Type pg_idx_blks_read
      InstancesFrom "datname"
      ValuesFrom idxblksread
    </Result>
    <Result>
      Type pg_idx_blks_hit
      InstancesFrom "datname"
      ValuesFrom idxblkshit
    </Result>
    <Result>
      Type pg_seq_scan
      InstancesFrom "datname"
      ValuesFrom seqscan
    </Result>
    <Result>
      Type pg_seq_tup_read
      InstancesFrom "datname"
      ValuesFrom seqtupread
    </Result>
    <Result>
      Type pg_tup_returned
      InstancesFrom "datname"
      ValuesFrom ret
    </Result>
    <Result>
      Type pg_tup_fetched
      InstancesFrom "datname"
      ValuesFrom fetch
    </Result>
    <Result>
      Type pg_tup_inserted
      InstancesFrom "datname"
      ValuesFrom ins
    </Result>
    <Result>
      Type pg_tup_updated
      InstancesFrom "datname"
      ValuesFrom upd
    </Result>
    <Result>
      Type pg_tup_deleted
      InstancesFrom "datname"
      ValuesFrom del
    </Result>
    <Result>
      Type pg_deadlocks
      InstancesFrom "datname"
      ValuesFrom deadlocks
    </Result>
    <Result>
      # if track_io_timing is enabled, otherwise zero
      Type pg_blk_read_time
      InstancesFrom "datname"
      ValuesFrom blk_read_time
    </Result>
    <Result>
      # if track_io_timing is enabled, otherwise zero
      Type pg_blk_write_time
      InstancesFrom "datname"
      ValuesFrom blk_write_time
    </Result>
   </Query>


  <Query database_stats_by_database>
    Statement "SELECT datname,
  numbackends AS backends,xact_commit AS commits,xact_rollback AS rollbacks,
  blks_read  *((
                SELECT pg_settings.setting::bigint AS setting
                FROM pg_settings
                WHERE pg_settings.name = 'block_size'::text
                )) AS read, blks_hit  *((
                SELECT pg_settings.setting::bigint AS setting
                FROM pg_settings
                WHERE pg_settings.name = 'block_size'::text
                )) AS hit
 ,(SELECT SUM(idx_scan) FROM pg_stat_user_indexes) AS idxscan
 ,COALESCE((SELECT SUM(idx_tup_read) FROM pg_stat_user_indexes),0) AS idxtupread
 ,COALESCE((SELECT SUM(idx_tup_fetch) FROM pg_stat_user_indexes),0) AS idxtupfetch
 ,COALESCE((SELECT SUM(idx_blks_read) *((
                SELECT pg_settings.setting::bigint AS setting
                FROM pg_settings
                WHERE pg_settings.name = 'block_size'::text
                ))  FROM pg_statio_user_indexes),0) AS idxblksread
 ,COALESCE((SELECT SUM(idx_blks_hit) *((
                SELECT pg_settings.setting::bigint AS setting
                FROM pg_settings
                WHERE pg_settings.name = 'block_size'::text
                ))  FROM pg_statio_user_indexes),0) AS idxblkshit
 ,COALESCE((SELECT SUM(seq_scan) FROM pg_stat_user_tables),0) AS seqscan
 ,COALESCE((SELECT SUM(seq_tup_read) FROM pg_stat_user_tables),0) AS seqtupread
 ,tup_returned AS ret, tup_fetched AS fetch, tup_inserted AS ins
 ,tup_updated AS upd, tup_deleted AS del, deadlocks, blk_read_time, blk_write_time
 FROM pg_stat_database WHERE datname NOT LIKE 'tmp_%';"
    <Result>
      Type pg_bkends
      InstancesFrom "datname"
      ValuesFrom backends
    </Result>
    <Result>
      Type pg_xact_commit
      InstancesFrom "datname"
      ValuesFrom commits
    </Result>
    <Result>
      Type pg_xact_rollback
      InstancesFrom "datname"
      ValuesFrom rollbacks
    </Result>
    <Result>
      Type pg_blks_read
      InstancesFrom "datname"
      ValuesFrom read
    </Result>
    <Result>
      Type pg_blks_hit
      InstancesFrom "datname"
      ValuesFrom hit
    </Result>
    <Result>
      Type pg_idx_scan
      InstancesFrom "datname"
      ValuesFrom idxscan
    </Result>
    <Result>
      Type pg_idx_tup_read
      InstancesFrom "datname"
      ValuesFrom idxtupread
    </Result>
    <Result>
      Type pg_idx_tup_fetch
      InstancesFrom "datname"
      ValuesFrom idxtupfetch
    </Result>
    <Result>
      Type pg_idx_blks_read
      InstancesFrom "datname"
      ValuesFrom idxblksread
    </Result>
    <Result>
      Type pg_idx_blks_hit
      InstancesFrom "datname"
      ValuesFrom idxblkshit
    </Result>
    <Result>
      Type pg_seq_scan
      InstancesFrom "datname"
      ValuesFrom seqscan
    </Result>
    <Result>
      Type pg_seq_tup_read
      InstancesFrom "datname"
      ValuesFrom seqtupread
    </Result>
    <Result>
      Type pg_tup_returned
      InstancesFrom "datname"
      ValuesFrom ret
    </Result>
    <Result>
      Type pg_tup_fetched
      InstancesFrom "datname"
      ValuesFrom fetch
    </Result>
    <Result>
      Type pg_tup_inserted
      InstancesFrom "datname"
      ValuesFrom ins
    </Result>
    <Result>
      Type pg_tup_updated
      InstancesFrom "datname"
      ValuesFrom upd
    </Result>
    <Result>
      Type pg_tup_deleted
      InstancesFrom "datname"
      ValuesFrom del
    </Result>
    <Result>
      Type pg_deadlocks
      InstancesFrom "datname"
      ValuesFrom deadlocks
    </Result>
    <Result>
      # if track_io_timing is enabled, otherwise zero
      Type pg_blk_read_time
      InstancesFrom "datname"
      ValuesFrom blk_read_time
    </Result>
    <Result>
      # if track_io_timing is enabled, otherwise zero
      Type pg_blk_write_time
      InstancesFrom "datname"
      ValuesFrom blk_write_time
    </Result>
   </Query>


  <Query pg_xlog>
    Statement "SELECT count(*) AS xlog_count FROM pg_ls_dir('pg_xlog') WHERE pg_ls_dir ~ E'^[0-9A-F]{24}\$';"
    <Result>
      Type pg_xlog
      ValuesFrom xlog_count
    </Result>
   </Query>

  <Query pg_xlog_96>
    Statement "SELECT count(*) AS xlog_count FROM pg_ls_dir('pg_wal') WHERE pg_ls_dir ~ E'^[0-9A-F]{24}\$';"
    <Result>
      Type pg_xlog
      ValuesFrom xlog_count
    </Result>
   </Query>


  <Query pg_trig_disabled>
    Statement "SELECT count(*) AS pg_trig_disabled FROM pg_trigger WHERE tgenabled = 'D';"
    <Result>
      Type pg_trig_disabled
      ValuesFrom pg_trig_disabled
    </Result>
   </Query>


  <Query pg_hit_ratio>
    Statement "SELECT
  round(100.*sd.blks_hit/(sd.blks_read+sd.blks_hit), 2) AS dhitratio,
  d.datname
FROM pg_stat_database sd
JOIN pg_database d ON (d.oid=sd.datid)
WHERE sd.blks_read+sd.blks_hit<>0 AND d.datname NOT LIKE 'tmp_%';"
    <Result>
      Type pg_hit_ratio
      InstancesFrom "datname"
      ValuesFrom dhitratio
    </Result>
   </Query>


   <Query pg_conflicts>
     # For B Servers Only
     Statement "SELECT datname, confl_tablespace, confl_lock, confl_snapshot, confl_bufferpin, confl_deadlock FROM pg_stat_database_conflicts WHERE datname NOT LIKE 'tmp_%';"
     <Result>
       Type pg_conflicts
       InstancesFrom "datname"
       ValuesFrom confl_tablespace confl_lock confl_snapshot confl_bufferpin confl_deadlock
     </Result>
   </Query>


   <Query a_server_location>
     # For A Servers Only
     Statement "SELECT CASE WHEN pg_is_in_recovery() THEN 0 ELSE
(SELECT ('x00000000FF000000'::bit(64)::bigint *
        ('x' || lpad(split_part(pg_current_xlog_location::text, '/', 1),16,'0'))::bit(64)::bigint) +
        ('x' || lpad(split_part(pg_current_xlog_location::text, '/', 2),16,'0'))::bit(64)::bigint AS location
FROM pg_current_xlog_location()) END AS location;"
     <Result>
       Type pg_a_location
       ValuesFrom location
     </Result>
   </Query>

   <Query a_server_location_96>
     # For A Servers Only
     Statement "SELECT CASE WHEN pg_is_in_recovery() THEN 0 ELSE
(SELECT ('x00000000FF000000'::bit(64)::bigint *
        ('x' || lpad(split_part(pg_current_wal_lsn::text, '/', 1),16,'0'))::bit(64)::bigint) +
        ('x' || lpad(split_part(pg_current_wal_lsn::text, '/', 2),16,'0'))::bit(64)::bigint AS location
FROM pg_current_wal_lsn()) END AS location;"
     <Result>
       Type pg_a_location
       ValuesFrom location
     </Result>
   </Query>


   <Query b_server_location>
     # For B Servers Only
     Statement "SELECT 
	COALESCE(('x00000000FF000000'::bit(64)::bigint * 
	('x' || lpad(split_part(pg_last_xlog_receive_location::text, '/', 1),16,'0'))::bit(64)::bigint) + 
	('x' || lpad(split_part(pg_last_xlog_receive_location::text, '/', 2),16,'0'))::bit(64)::bigint,0) AS receive,
	COALESCE(('x00000000FF000000'::bit(64)::bigint * 
	('x' || lpad(split_part(pg_last_xlog_replay_location::text, '/', 1),16,'0'))::bit(64)::bigint) + 
	('x' || lpad(split_part(pg_last_xlog_replay_location::text, '/', 2),16,'0'))::bit(64)::bigint,0) AS replay
FROM pg_last_xlog_receive_location(), pg_last_xlog_replay_location()"
     <Result>
       Type pg_b_location
       ValuesFrom receive replay
     </Result>
   </Query>

   <Query b_server_location_96>
     # For B Servers Only
     Statement "SELECT
        COALESCE(('x00000000FF000000'::bit(64)::bigint *
        ('x' || lpad(split_part(pg_last_wal_receive_lsn::text, '/', 1),16,'0'))::bit(64)::bigint) +
        ('x' || lpad(split_part(pg_last_wal_receive_lsn::text, '/', 2),16,'0'))::bit(64)::bigint,0) AS receive,
        COALESCE(('x00000000FF000000'::bit(64)::bigint *
        ('x' || lpad(split_part(pg_last_wal_replay_lsn::text, '/', 1),16,'0'))::bit(64)::bigint) +
        ('x' || lpad(split_part(pg_last_wal_replay_lsn::text, '/', 2),16,'0'))::bit(64)::bigint,0) AS replay
FROM pg_last_wal_receive_lsn(), pg_last_wal_replay_lsn();"
     <Result>
       Type pg_b_location
       ValuesFrom receive replay
     </Result>
   </Query>

   <Query query_length>
     Statement "SELECT a.datname, COALESCE(b.query_length,0) AS seconds, COALESCE(ROUND(b.query_length)/60,0) AS minutes, COALESCE(ROUND(b.query_length)/60/60,0) AS hours
FROM pg_database a
LEFT JOIN (
	SELECT datname, EXTRACT(EPOCH FROM max(clock_timestamp()-query_start)) AS query_length
    FROM pg_stat_activity
    WHERE state='active' AND datname NOT LIKE 'tmp_%' GROUP BY datname
) b ON a.datname = b.datname
WHERE a.datname NOT LIKE 'tmp_%'"
     <Result>
       Type pg_query_length
       InstancesFrom "datname"
       ValuesFrom seconds
     </Result>
     <Result>
       Type pg_query_length_min
       InstancesFrom "datname"
       ValuesFrom minutes
     </Result>
     <Result>
       Type pg_query_length_hour
       InstancesFrom "datname"
       ValuesFrom hours
     </Result>
   </Query>

   <Query query_length_96>
     Statement "SELECT a.datname, COALESCE(b.query_length,0) AS seconds, COALESCE(ROUND(b.query_length)/60,0) AS minutes, COALESCE(ROUND(b.query_length)/60/60,0) AS hours
FROM pg_database a
LEFT JOIN (
	SELECT datname, EXTRACT(EPOCH FROM max(clock_timestamp()-query_start)) AS query_length
    FROM pg_stat_activity
    WHERE state='active' AND datname NOT LIKE 'tmp_%' AND backend_type = 'client backend' GROUP BY datname
) b ON a.datname = b.datname
WHERE a.datname NOT LIKE 'tmp_%'"
     <Result>
       Type pg_query_length
       InstancesFrom "datname"
       ValuesFrom seconds
     </Result>
     <Result>
       Type pg_query_length_min
       InstancesFrom "datname"
       ValuesFrom minutes
     </Result>
     <Result>
       Type pg_query_length_hour
       InstancesFrom "datname"
       ValuesFrom hours
     </Result>
   </Query>

   <Query query_length_server>
     Statement "SELECT COALESCE(b.query_length,0) AS seconds, COALESCE(ROUND(b.query_length)/60,0) AS minutes, COALESCE(ROUND(b.query_length)/60/60,0) AS hours
FROM (
	SELECT EXTRACT(EPOCH FROM max(clock_timestamp()-query_start)) AS query_length
    FROM pg_stat_activity
    WHERE state='active' AND datname NOT LIKE 'tmp_%'
) b "
     <Result>
       Type pg_query_length
       ValuesFrom seconds
     </Result>
     <Result>
       Type pg_query_length_min
       ValuesFrom minutes
     </Result>
     <Result>
       Type pg_query_length_hour
       ValuesFrom hours
     </Result>
   </Query>

   <Query query_length_server_96>
     Statement "SELECT COALESCE(b.query_length,0) AS seconds, COALESCE(ROUND(b.query_length)/60,0) AS minutes, COALESCE(ROUND(b.query_length)/60/60,0) AS hours
FROM (
	SELECT EXTRACT(EPOCH FROM max(clock_timestamp()-query_start)) AS query_length
    FROM pg_stat_activity
    WHERE state='active' AND datname NOT LIKE 'tmp_%' AND backend_type = 'client backend'
) b "
     <Result>
       Type pg_query_length
       ValuesFrom seconds
     </Result>
     <Result>
       Type pg_query_length_min
       ValuesFrom minutes
     </Result>
     <Result>
       Type pg_query_length_hour
       ValuesFrom hours
     </Result>
   </Query>

   <Query wait_length>
     Statement "SELECT a.datname, COALESCE(b.query_length,0) AS seconds
FROM pg_database a
LEFT JOIN (
        SELECT datname, EXTRACT(EPOCH FROM max(clock_timestamp()-query_start)) AS query_length
    FROM pg_stat_activity
    WHERE waiting = TRUE AND datname NOT LIKE 'tmp_%' GROUP BY datname
) b ON a.datname = b.datname
WHERE a.datname NOT LIKE 'tmp_%'"
     <Result>
       Type pg_wait_length
       InstancesFrom "datname"
       ValuesFrom seconds
     </Result>
   </Query>

   <Query wait_length_96>
     Statement "SELECT a.datname, COALESCE(b.query_length,0) AS seconds
FROM pg_database a
LEFT JOIN (
        SELECT datname, EXTRACT(EPOCH FROM max(clock_timestamp()-query_start)) AS query_length
    FROM pg_stat_activity
    WHERE wait_event_type IN ('Lock') AND datname NOT LIKE 'tmp_%' GROUP BY datname
) b ON a.datname = b.datname
WHERE a.datname NOT LIKE 'tmp_%';"
     <Result>
       Type pg_wait_length
       InstancesFrom "datname"
       ValuesFrom seconds
     </Result>
   </Query>


   <Query wait_length_server>
     Statement "SELECT COALESCE(EXTRACT(EPOCH FROM max(clock_timestamp()-query_start)),0) AS seconds
FROM pg_stat_activity
WHERE waiting = TRUE AND datname NOT LIKE 'tmp_%'"
     <Result>
       Type pg_wait_length
       ValuesFrom seconds
     </Result>
   </Query>

   <Query wait_length_server_96>
     Statement "SELECT COALESCE(EXTRACT(EPOCH FROM max(clock_timestamp()-query_start)),0) AS seconds
FROM pg_stat_activity
WHERE wait_event_type IN ('Lock') AND datname NOT LIKE 'tmp_%'"
     <Result>
       Type pg_wait_length
       ValuesFrom seconds
     </Result>
   </Query>



   <Query transaction_length>
     Statement "SELECT a.datname, COALESCE(b.xact_length,0) AS seconds
FROM pg_database a
LEFT JOIN (
        SELECT datname, EXTRACT(EPOCH FROM max(clock_timestamp()-xact_start)) AS xact_length
    FROM pg_stat_activity
    WHERE xact_start IS NOT NULL AND datname NOT LIKE 'tmp_%' GROUP BY datname
) b ON a.datname = b.datname
WHERE a.datname NOT LIKE 'tmp_%'"
     <Result>
       Type pg_xact_length
       InstancesFrom "datname"
       ValuesFrom seconds
     </Result>
   </Query>


   <Query transaction_length_96>
     Statement "SELECT a.datname, COALESCE(b.xact_length,0) AS seconds
FROM pg_database a
LEFT JOIN (
        SELECT datname, EXTRACT(EPOCH FROM max(clock_timestamp()-xact_start)) AS xact_length
    FROM pg_stat_activity
    WHERE xact_start IS NOT NULL AND datname NOT LIKE 'tmp_%' AND backend_type = 'client backend' GROUP BY datname
) b ON a.datname = b.datname
WHERE a.datname NOT LIKE 'tmp_%'"
     <Result>
       Type pg_xact_length
       InstancesFrom "datname"
       ValuesFrom seconds
     </Result>
   </Query>



   <Query transaction_length_server>
     Statement "SELECT COALESCE(EXTRACT(EPOCH FROM max(clock_timestamp()-xact_start)),0) AS seconds
FROM pg_stat_activity
WHERE xact_start IS NOT NULL AND datname NOT LIKE 'tmp_%'"
     <Result>
       Type pg_xact_length
       ValuesFrom seconds
     </Result>
   </Query>

   <Query transaction_length_server_96>
     Statement "SELECT COALESCE(EXTRACT(EPOCH FROM max(clock_timestamp()-xact_start)),0) AS seconds
FROM pg_stat_activity
WHERE xact_start IS NOT NULL AND datname NOT LIKE 'tmp_%' AND backend_type = 'client backend'"
     <Result>
       Type pg_xact_length
       ValuesFrom seconds
     </Result>
   </Query>


   <Query size_by_table>
      Statement "SELECT 
	t.table_schema || '.' || t.table_name AS name,  
    pg_total_relation_size((t.table_schema || '.' || t.table_name)::regclass) AS size
FROM information_schema.tables t
WHERE t.table_schema NOT IN ('pg_catalog', 'information_schema') AND table_type != 'VIEW'"
     <Result>
       Type pg_size_by_table
       InstancesFrom "name"
       ValuesFrom size
     </Result>
   </Query>


# Stats for Primary Server
  <Database postgres>
    Instance "db-a"
    Host "db-a"
    Port "5432"
    User "postgres"
    Query connections
    Query connection_states
    Query connection_state
    Query database_size
    Query buffercache
    Query buffercache_databases
    Query database_transactions
    Query transactions
    Query concurrent_txns
    Query pg_hit_ratio
    Query pg_xlog
    Query connection_state_by_database
    Query database_commit_ratio_by_database
    Query database_stats_by_database
    Query a_server_location
    Query b_server_location
    Query query_length
    Query query_length_server
    Query wait_length
    Query wait_length_server
    Query transaction_length
    Query transaction_length_server
    Query pg_conflicts
  </Database>

# Stats for Secondary Server
  <Database postgres>
    Instance "db-b"
    Host "db-b"
    Port "5432"
    User "postgres"
    Query connections
    Query connection_states
    Query connection_state
    Query database_size
    Query buffercache
    Query buffercache_databases
    Query database_transactions
    Query transactions
    Query concurrent_txns
    Query pg_hit_ratio
    Query pg_xlog
    Query connection_state_by_database
    Query database_commit_ratio_by_database
    Query database_stats_by_database
    Query a_server_location
    Query b_server_location
    Query query_length
    Query query_length_server
    Query wait_length
    Query wait_length_server
    Query transaction_length
    Query transaction_length_server
    Query pg_conflicts
  </Database>

#Stats for a specific database
  <Database main>
    Instance "main"
    Host "db-a"
    Port "5432"
    User "postgres"
    Query pg_trig_disabled
  </Database>


#Stats for a specific database, every 300 seconds aka 5 minutes
  <Database main>
    Instance "main"
    Host "sqltest"
    Port "5432"
    User "postgres"
    Query stat_tables
    Query planning_time
    Interval 300
  </Database>

</Plugin>

# vim: set ft=config :
